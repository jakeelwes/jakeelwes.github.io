import networkx as nx
import json

obj = json.load(open("FBData2016jelwes.json"))
# print(obj.keys())

G=nx.Graph()

# iterate through and add node/name as nodes and links as vertices
# maybe use G.add_node(n, name=i['name']) or 1295-n(name)

# n=0
# for i in obj['nodes']:
#     G.add_node(n)
#     n+=1

# just do raw nums
x=0
for i in range(0,1296):
    G.add_node(x)
    x+=1

for i in obj['links']:
    source = i['source']
    target = i['target']
    G.add_edge(source, target)


# save for gephi
nx.write_graphml(G, "test.graphml")

# draw Graph
import matplotlib.pyplot as plt
nx.draw(G)
plt.show()

# export json for d3

from networkx.readwrite import json_graph
data = json_graph.node_link_data(G)
H = json_graph.node_link_graph(data)
with open('data.txt', 'w') as outfile:
    json.dump(data, outfile)


# using 3d with mayavi





# # for mathematica - from https://mathematica.stackexchange.com/questions/118558/how-can-i-generate-a-graph-from-a-networkx-json/118567
#
# vertices = obj[["nodes", All, "name"]]
# edgesAsIndexPairs = 1 + Values /@ obj[["links", All, {"source", "target"}]];
# edges = DirectedEdge @@ vertices[[#]] & /@ edgesAsIndexPairs
#
# g = Graph[vertices, edges]
#
# Graph[g, VertexStyle ->
#   Thread[VertexList[g] -> (ColorData[97] /@ (groups + 1))],
#  VertexSize -> 1.5]
